
8_UART_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000460  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00010460  2**0
                  CONTENTS
  4 .ARM          00000000  08000458  08000458  00010460  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000458  08000460  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010460  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000810  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000262  00000000  00000000  00010ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00010f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00010fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001901a  00000000  00000000  00011010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d1b  00000000  00000000  0002a02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ba7e  00000000  00000000  0002ad45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b67c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000158  00000000  00000000  000b6814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000440 	.word	0x08000440

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000440 	.word	0x08000440

080001e8 <main>:
#define PIN13			(1U<<13)
#define ORANGE_LED_PIN	PIN13

char data;

int main(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIODEN;
 80001ec:	4b15      	ldr	r3, [pc, #84]	; (8000244 <main+0x5c>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a14      	ldr	r2, [pc, #80]	; (8000244 <main+0x5c>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER |= (1U<<26);
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <main+0x60>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <main+0x60>)
 80001fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000202:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1U<<27);
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <main+0x60>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0f      	ldr	r2, [pc, #60]	; (8000248 <main+0x60>)
 800020a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800020e:	6013      	str	r3, [r2, #0]
	uart2_rxtx_init();
 8000210:	f000 f81e 	bl	8000250 <uart2_rxtx_init>

	while(1){
		data=uart2_read();
 8000214:	f000 f88c 	bl	8000330 <uart2_read>
 8000218:	4603      	mov	r3, r0
 800021a:	461a      	mov	r2, r3
 800021c:	4b0b      	ldr	r3, [pc, #44]	; (800024c <main+0x64>)
 800021e:	701a      	strb	r2, [r3, #0]
		if(data == '1'){
 8000220:	4b0a      	ldr	r3, [pc, #40]	; (800024c <main+0x64>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b31      	cmp	r3, #49	; 0x31
 8000226:	d106      	bne.n	8000236 <main+0x4e>
			GPIOD->ODR |= ORANGE_LED_PIN;
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <main+0x60>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <main+0x60>)
 800022e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000232:	6153      	str	r3, [r2, #20]
 8000234:	e7ee      	b.n	8000214 <main+0x2c>
		}
		else{
			GPIOD->ODR &=~ORANGE_LED_PIN;
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <main+0x60>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a03      	ldr	r2, [pc, #12]	; (8000248 <main+0x60>)
 800023c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000240:	6153      	str	r3, [r2, #20]
		data=uart2_read();
 8000242:	e7e7      	b.n	8000214 <main+0x2c>
 8000244:	40023800 	.word	0x40023800
 8000248:	40020c00 	.word	0x40020c00
 800024c:	2000001c 	.word	0x2000001c

08000250 <uart2_rxtx_init>:
int __io_putchar(int ch){
	uart2_write(ch);
	return ch;
}

void uart2_rxtx_init(void){
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	//AHB1 clock enable
	RCC->AHB1ENR |= GPIOAEN;
 8000254:	4b32      	ldr	r3, [pc, #200]	; (8000320 <uart2_rxtx_init+0xd0>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <uart2_rxtx_init+0xd0>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6313      	str	r3, [r2, #48]	; 0x30

	//Set TX GPIO mode
	GPIOA->MODER &=~(1U<<4);
 8000260:	4b30      	ldr	r3, [pc, #192]	; (8000324 <uart2_rxtx_init+0xd4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <uart2_rxtx_init+0xd4>)
 8000266:	f023 0310 	bic.w	r3, r3, #16
 800026a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800026c:	4b2d      	ldr	r3, [pc, #180]	; (8000324 <uart2_rxtx_init+0xd4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a2c      	ldr	r2, [pc, #176]	; (8000324 <uart2_rxtx_init+0xd4>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6013      	str	r3, [r2, #0]

	//Set TX GPIO alternate function
	GPIOA->AFR[0] |= (1U<<8);
 8000278:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <uart2_rxtx_init+0xd4>)
 800027a:	6a1b      	ldr	r3, [r3, #32]
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <uart2_rxtx_init+0xd4>)
 800027e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000282:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000284:	4b27      	ldr	r3, [pc, #156]	; (8000324 <uart2_rxtx_init+0xd4>)
 8000286:	6a1b      	ldr	r3, [r3, #32]
 8000288:	4a26      	ldr	r2, [pc, #152]	; (8000324 <uart2_rxtx_init+0xd4>)
 800028a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800028e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000290:	4b24      	ldr	r3, [pc, #144]	; (8000324 <uart2_rxtx_init+0xd4>)
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	4a23      	ldr	r2, [pc, #140]	; (8000324 <uart2_rxtx_init+0xd4>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 800029c:	4b21      	ldr	r3, [pc, #132]	; (8000324 <uart2_rxtx_init+0xd4>)
 800029e:	6a1b      	ldr	r3, [r3, #32]
 80002a0:	4a20      	ldr	r2, [pc, #128]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002a6:	6213      	str	r3, [r2, #32]

	//Set RX GPIO mode
	GPIOA->MODER &=~(1U<<6);
 80002a8:	4b1e      	ldr	r3, [pc, #120]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1d      	ldr	r2, [pc, #116]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1a      	ldr	r2, [pc, #104]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002be:	6013      	str	r3, [r2, #0]

	//Set RX GPIO alternate function
	GPIOA->AFR[0] |= (1U<<12);
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	4a17      	ldr	r2, [pc, #92]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80002cc:	4b15      	ldr	r3, [pc, #84]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002ce:	6a1b      	ldr	r3, [r3, #32]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a11      	ldr	r2, [pc, #68]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002e6:	6a1b      	ldr	r3, [r3, #32]
 80002e8:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <uart2_rxtx_init+0xd4>)
 80002ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002ee:	6213      	str	r3, [r2, #32]
	//APB1 clock enable
	RCC->APB1ENR |= UART2EN;
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <uart2_rxtx_init+0xd0>)
 80002f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002f4:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <uart2_rxtx_init+0xd0>)
 80002f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fa:	6413      	str	r3, [r2, #64]	; 0x40

	//Set baud rate
	set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	4909      	ldr	r1, [pc, #36]	; (8000328 <uart2_rxtx_init+0xd8>)
 8000302:	480a      	ldr	r0, [pc, #40]	; (800032c <uart2_rxtx_init+0xdc>)
 8000304:	f000 f828 	bl	8000358 <set_baudrate>

	//Enable TX (TE) and RX (RE)
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <uart2_rxtx_init+0xdc>)
 800030a:	220c      	movs	r2, #12
 800030c:	60da      	str	r2, [r3, #12]

	//Enable USART (UE)
	USART2->CR1 |= CR1_UE;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <uart2_rxtx_init+0xdc>)
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	4a06      	ldr	r2, [pc, #24]	; (800032c <uart2_rxtx_init+0xdc>)
 8000314:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000318:	60d3      	str	r3, [r2, #12]

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	40004400 	.word	0x40004400

08000330 <uart2_read>:

	//Enable TX (TE)
	USART2->CR1 = CR1_TE;
}

char uart2_read(void){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	while(!(USART2->SR & SR_RXNE)){}
 8000334:	bf00      	nop
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <uart2_read+0x24>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 0320 	and.w	r3, r3, #32
 800033e:	2b00      	cmp	r3, #0
 8000340:	d0f9      	beq.n	8000336 <uart2_read+0x6>
	return USART2->DR;
 8000342:	4b04      	ldr	r3, [pc, #16]	; (8000354 <uart2_read+0x24>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	b2db      	uxtb	r3, r3
}
 8000348:	4618      	mov	r0, r3
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40004400 	.word	0x40004400

08000358 <set_baudrate>:
void uart2_write(int ch){
	while(!(USART2->SR & SR_TXE)){}
	USART2->DR = (ch & 0xFF);
}

static void set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t baudrate){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
	USARTx->BRR = calc_baudrate(PeriphClk,baudrate);
 8000364:	6879      	ldr	r1, [r7, #4]
 8000366:	68b8      	ldr	r0, [r7, #8]
 8000368:	f000 f808 	bl	800037c <calc_baudrate>
 800036c:	4603      	mov	r3, r0
 800036e:	461a      	mov	r2, r3
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	609a      	str	r2, [r3, #8]
}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <calc_baudrate>:

static uint16_t calc_baudrate(uint32_t PeriphClk, uint32_t baudrate){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (baudrate/2U))/baudrate);
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	085a      	lsrs	r2, r3, #1
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	441a      	add	r2, r3
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	fbb2 f3f3 	udiv	r3, r2, r3
 8000394:	b29b      	uxth	r3, r3

}
 8000396:	4618      	mov	r0, r3
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d2:	f000 f811 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d6:	f7ff ff07 	bl	80001e8 <main>

080003da <LoopForever>:

LoopForever:
  b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e8:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f0:	20000020 	.word	0x20000020

080003f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	; (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	; (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
