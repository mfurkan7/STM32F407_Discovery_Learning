
14_Input_Compare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103e8  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006a6  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000186  00000000  00000000  00010abe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001046  00000000  00000000  00010d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ca6  00000000  00000000  00011d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ba81  00000000  00000000  000129fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0009e47d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  0009e4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003c8 	.word	0x080003c8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003c8 	.word	0x080003c8

080001e8 <main>:
#include "systick.h"
#include "time.h"

int timestamp = 0;

int main(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	tim4_PD12_CCM_init();
 80001ec:	f000 f814 	bl	8000218 <tim4_PD12_CCM_init>
	tim3_PB4_CCM_init();
 80001f0:	f000 f85a 	bl	80002a8 <tim3_PB4_CCM_init>
	while(1){
		while(!(TIM3->SR & TIM3_SR_CC1IF)){}
 80001f4:	bf00      	nop
 80001f6:	4b06      	ldr	r3, [pc, #24]	; (8000210 <main+0x28>)
 80001f8:	691b      	ldr	r3, [r3, #16]
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <main+0xe>
		timestamp = TIM3->CCR1;
 8000202:	4b03      	ldr	r3, [pc, #12]	; (8000210 <main+0x28>)
 8000204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000206:	461a      	mov	r2, r3
 8000208:	4b02      	ldr	r3, [pc, #8]	; (8000214 <main+0x2c>)
 800020a:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & TIM3_SR_CC1IF)){}
 800020c:	e7f2      	b.n	80001f4 <main+0xc>
 800020e:	bf00      	nop
 8000210:	40000400 	.word	0x40000400
 8000214:	2000001c 	.word	0x2000001c

08000218 <tim4_PD12_CCM_init>:
	TIM2->CNT = 0; // As the default counter is upcounter
	/*Enable the Timer 2 counter*/
	TIM2->CR1 |= TIM_CEN;
}

void tim4_PD12_CCM_init(void){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	//LED GPIOD Clock Configuration
	RCC->AHB1ENR |= RCC_GPIODEN;
 800021c:	4b1f      	ldr	r3, [pc, #124]	; (800029c <tim4_PD12_CCM_init+0x84>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000220:	4a1e      	ldr	r2, [pc, #120]	; (800029c <tim4_PD12_CCM_init+0x84>)
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	6313      	str	r3, [r2, #48]	; 0x30
	//Set the PD12 as OUTPUT
	GPIOD->MODER &=~(1U<<24);
 8000228:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <tim4_PD12_CCM_init+0x88>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <tim4_PD12_CCM_init+0x88>)
 800022e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |=	(1U<<25);
 8000234:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <tim4_PD12_CCM_init+0x88>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <tim4_PD12_CCM_init+0x88>)
 800023a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800023e:	6013      	str	r3, [r2, #0]
	/*AF2 Settings*/
	GPIOD->AFR[1] |= (1U<<17);
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <tim4_PD12_CCM_init+0x88>)
 8000242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000244:	4a16      	ldr	r2, [pc, #88]	; (80002a0 <tim4_PD12_CCM_init+0x88>)
 8000246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024a:	6253      	str	r3, [r2, #36]	; 0x24
	/*Enable the Timer clock*/
	RCC->APB1ENR |= TIM4EN;
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <tim4_PD12_CCM_init+0x84>)
 800024e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <tim4_PD12_CCM_init+0x84>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6413      	str	r3, [r2, #64]	; 0x40
	/*Set Prescaler PSC*/
	TIM4->PSC = 16000 - 1;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 800025a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800025e:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set Auto-Reload Register ARR*/
	TIM4->ARR = 1000 - 1;
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 8000262:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000266:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Set the CC mode as Toggle mode*/
	TIM4->CCMR1 |= TIM4_OC1M;
 8000268:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 800026e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000272:	6193      	str	r3, [r2, #24]
	/*Enable the CC output register*/
	TIM4->CCER |= TIM4_CC1E;
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6213      	str	r3, [r2, #32]
	/*Set the counter value*/
	TIM4->CNT = 0; // As the default counter is upcounter
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 8000282:	2200      	movs	r2, #0
 8000284:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable the Timer 4 counter*/
	TIM4->CR1 |= TIM_CEN;
 8000286:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a06      	ldr	r2, [pc, #24]	; (80002a4 <tim4_PD12_CCM_init+0x8c>)
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020c00 	.word	0x40020c00
 80002a4:	40000800 	.word	0x40000800

080002a8 <tim3_PB4_CCM_init>:
/*Trigger Port and Input port must have the same channel but have different timers*/
void tim3_PB4_CCM_init(void){
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	//PB4 GPIOB Clock Configuration
	RCC->AHB1ENR |= RCC_GPIOBEN;
 80002ac:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <tim3_PB4_CCM_init+0x78>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a1b      	ldr	r2, [pc, #108]	; (8000320 <tim3_PB4_CCM_init+0x78>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30
	//Set the PB4 as alternate function
	GPIOB->MODER &=~(1U<<8);
 80002b8:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <tim3_PB4_CCM_init+0x7c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a19      	ldr	r2, [pc, #100]	; (8000324 <tim3_PB4_CCM_init+0x7c>)
 80002be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=	(1U<<9);
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <tim3_PB4_CCM_init+0x7c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a16      	ldr	r2, [pc, #88]	; (8000324 <tim3_PB4_CCM_init+0x7c>)
 80002ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ce:	6013      	str	r3, [r2, #0]
	/*AF2 Settings*/
	GPIOB->AFR[0] |= (1U<<17);
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <tim3_PB4_CCM_init+0x7c>)
 80002d2:	6a1b      	ldr	r3, [r3, #32]
 80002d4:	4a13      	ldr	r2, [pc, #76]	; (8000324 <tim3_PB4_CCM_init+0x7c>)
 80002d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002da:	6213      	str	r3, [r2, #32]
	/*Enable the Timer clock*/
	RCC->APB1ENR |= TIM3EN;
 80002dc:	4b10      	ldr	r3, [pc, #64]	; (8000320 <tim3_PB4_CCM_init+0x78>)
 80002de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e0:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <tim3_PB4_CCM_init+0x78>)
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	6413      	str	r3, [r2, #64]	; 0x40
	/*Set Prescaler PSC*/
	TIM3->PSC = 16000 - 1;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <tim3_PB4_CCM_init+0x80>)
 80002ea:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set the CC mode as Input mode*/
	TIM3->CCMR1 |= TIM3_CC1S;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <tim3_PB4_CCM_init+0x80>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <tim3_PB4_CCM_init+0x80>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6193      	str	r3, [r2, #24]
	/*Enable the CC output register*/
	TIM3->CCER |= TIM3_CC1E;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <tim3_PB4_CCM_init+0x80>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <tim3_PB4_CCM_init+0x80>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6213      	str	r3, [r2, #32]
	/*Enable the Timer 3 counter*/
	TIM3->CR1 |= TIM_CEN;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <tim3_PB4_CCM_init+0x80>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a06      	ldr	r2, [pc, #24]	; (8000328 <tim3_PB4_CCM_init+0x80>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020400 	.word	0x40020400
 8000328:	40000400 	.word	0x40000400

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 f811 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff43 	bl	80001e8 <main>

08000362 <LoopForever>:

LoopForever:
  b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	20000020 	.word	0x20000020

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4d0d      	ldr	r5, [pc, #52]	; (80003b8 <__libc_init_array+0x38>)
 8000384:	4c0d      	ldr	r4, [pc, #52]	; (80003bc <__libc_init_array+0x3c>)
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	2600      	movs	r6, #0
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	4d0b      	ldr	r5, [pc, #44]	; (80003c0 <__libc_init_array+0x40>)
 8000392:	4c0c      	ldr	r4, [pc, #48]	; (80003c4 <__libc_init_array+0x44>)
 8000394:	f000 f818 	bl	80003c8 <_init>
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	2600      	movs	r6, #0
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003e0 	.word	0x080003e0
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003e0 	.word	0x080003e0
 80003c4:	080003e4 	.word	0x080003e4

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr
