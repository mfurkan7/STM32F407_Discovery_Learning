
5_UART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000408  00010408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00010408  2**0
                  CONTENTS
  4 .ARM          00000000  08000400  08000400  00010408  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000400  08000408  00010408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010408  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010408  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000049d  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000174  00000000  00000000  000108d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  00010ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180d4  00000000  00000000  00010b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005f4  00000000  00000000  00028bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000879ed  00000000  00000000  000291d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b0bbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000ec  00000000  00000000  000b0c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080003e8 	.word	0x080003e8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080003e8 	.word	0x080003e8

080001e8 <main>:
static void UART_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_UART_baudrate(uint32_t PeriphClk, uint32_t BaudRate);
void UART2_TX_Init(void);
void UART2_write(int ch);

int main(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	UART2_TX_Init();
 80001ee:	f000 f811 	bl	8000214 <UART2_TX_Init>
	while(1){
		UART2_write('F');
 80001f2:	2046      	movs	r0, #70	; 0x46
 80001f4:	f000 f86c 	bl	80002d0 <UART2_write>
		for(int i=0;i<1000000;i++){}
 80001f8:	2300      	movs	r3, #0
 80001fa:	607b      	str	r3, [r7, #4]
 80001fc:	e002      	b.n	8000204 <main+0x1c>
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	3301      	adds	r3, #1
 8000202:	607b      	str	r3, [r7, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	4a02      	ldr	r2, [pc, #8]	; (8000210 <main+0x28>)
 8000208:	4293      	cmp	r3, r2
 800020a:	ddf8      	ble.n	80001fe <main+0x16>
		UART2_write('F');
 800020c:	e7f1      	b.n	80001f2 <main+0xa>
 800020e:	bf00      	nop
 8000210:	000f423f 	.word	0x000f423f

08000214 <UART2_TX_Init>:
	}
}

void UART2_TX_Init(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOD*/
	RCC->AHB1ENR |= GPIODEN;
 8000218:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <UART2_TX_Init+0xac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a28      	ldr	r2, [pc, #160]	; (80002c0 <UART2_TX_Init+0xac>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
	/*PD5 -> TX
	 *PD6 -> RX*/
	/*Configure Pin D5 Function Mode to Alternate Function Mode*/
	GPIOD->MODER &= ~(1U<<10);
 8000224:	4b27      	ldr	r3, [pc, #156]	; (80002c4 <UART2_TX_Init+0xb0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a26      	ldr	r2, [pc, #152]	; (80002c4 <UART2_TX_Init+0xb0>)
 800022a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800022e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<11);
 8000230:	4b24      	ldr	r3, [pc, #144]	; (80002c4 <UART2_TX_Init+0xb0>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a23      	ldr	r2, [pc, #140]	; (80002c4 <UART2_TX_Init+0xb0>)
 8000236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800023a:	6013      	str	r3, [r2, #0]

	/*Configure UART_TX Alternate Function Type to UART_TX AF7 */
	GPIOD->AFR[0] |= (1U<<20);
 800023c:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <UART2_TX_Init+0xb0>)
 800023e:	6a1b      	ldr	r3, [r3, #32]
 8000240:	4a20      	ldr	r2, [pc, #128]	; (80002c4 <UART2_TX_Init+0xb0>)
 8000242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000246:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= (1U<<21);
 8000248:	4b1e      	ldr	r3, [pc, #120]	; (80002c4 <UART2_TX_Init+0xb0>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a1d      	ldr	r2, [pc, #116]	; (80002c4 <UART2_TX_Init+0xb0>)
 800024e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000252:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |= (1U<<22);
 8000254:	4b1b      	ldr	r3, [pc, #108]	; (80002c4 <UART2_TX_Init+0xb0>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a1a      	ldr	r2, [pc, #104]	; (80002c4 <UART2_TX_Init+0xb0>)
 800025a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800025e:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &=~(1U<<23);
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <UART2_TX_Init+0xb0>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <UART2_TX_Init+0xb0>)
 8000266:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800026a:	6213      	str	r3, [r2, #32]

	/*Configure the UART Module*/
	RCC->APB1ENR |= UART2EN;
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <UART2_TX_Init+0xac>)
 800026e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000270:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <UART2_TX_Init+0xac>)
 8000272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000276:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure the Baud rate*/
	UART_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800027c:	4912      	ldr	r1, [pc, #72]	; (80002c8 <UART2_TX_Init+0xb4>)
 800027e:	4813      	ldr	r0, [pc, #76]	; (80002cc <UART2_TX_Init+0xb8>)
 8000280:	f000 f83e 	bl	8000300 <UART_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = CR1_TE; // To clean all the information in UART, we don't put or(|) operator
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <UART2_TX_Init+0xb8>)
 8000286:	2208      	movs	r2, #8
 8000288:	60da      	str	r2, [r3, #12]
	USART2->CR1|= CR1_UE; // Enable the USART
 800028a:	4b10      	ldr	r3, [pc, #64]	; (80002cc <UART2_TX_Init+0xb8>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <UART2_TX_Init+0xb8>)
 8000290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000294:	60d3      	str	r3, [r2, #12]
	//Set word length
	USART2->CR1 &=~(1U<<12);
 8000296:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <UART2_TX_Init+0xb8>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <UART2_TX_Init+0xb8>)
 800029c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002a0:	60d3      	str	r3, [r2, #12]

	//Configure Stop Bit
	USART2->CR2 &=~(1U<<12);
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <UART2_TX_Init+0xb8>)
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	4a09      	ldr	r2, [pc, #36]	; (80002cc <UART2_TX_Init+0xb8>)
 80002a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002ac:	6113      	str	r3, [r2, #16]
	USART2->CR2 |= (1U<<13);
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <UART2_TX_Init+0xb8>)
 80002b0:	691b      	ldr	r3, [r3, #16]
 80002b2:	4a06      	ldr	r2, [pc, #24]	; (80002cc <UART2_TX_Init+0xb8>)
 80002b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002b8:	6113      	str	r3, [r2, #16]
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020c00 	.word	0x40020c00
 80002c8:	00f42400 	.word	0x00f42400
 80002cc:	40004400 	.word	0x40004400

080002d0 <UART2_write>:

void UART2_write(int ch){
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & SR_TXE)){} // We are being sure that the transmit data register is empty.
 80002d8:	bf00      	nop
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <UART2_write+0x2c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <UART2_write+0xa>
	USART2->DR = (ch & 0xFF);
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a04      	ldr	r2, [pc, #16]	; (80002fc <UART2_write+0x2c>)
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	6053      	str	r3, [r2, #4]

}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40004400 	.word	0x40004400

08000300 <UART_set_baudrate>:
static void UART_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t BaudRate){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_UART_baudrate(PeriphClk,BaudRate);
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f000 f808 	bl	8000324 <compute_UART_baudrate>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	609a      	str	r2, [r3, #8]
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <compute_UART_baudrate>:
static uint16_t compute_UART_baudrate(uint32_t PeriphClk, uint32_t BaudRate){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate / 2U))/BaudRate);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	085a      	lsrs	r2, r3, #1
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	441a      	add	r2, r3
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	fbb2 f3f3 	udiv	r3, r2, r3
 800033c:	b29b      	uxth	r3, r3
}
 800033e:	4618      	mov	r0, r3
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	; (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	; (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	; (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037e:	f7ff ff33 	bl	80001e8 <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	2000001c 	.word	0x2000001c

0800039c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	; (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	; (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	; (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	; (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
